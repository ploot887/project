Анализ содержимого папки: C:\Users\User\Desktop\proekt\SequencerMod
==================================================

--- Файл №1 ---
Путь: gradle.properties
--------------------
# Done to increase the memory available to gradle.
org.gradle.jvmargs=-Xmx4G
org.gradle.parallel=true

# Fabric Properties
# check these on https://fabricmc.net/develop
minecraft_version=1.20.1
yarn_mappings=1.20.1+build.10
loader_version=0.14.22
loom_version=1.3.10

# Mod Properties
mod_version=1.0.0
maven_group=seq.sequencermod
archives_base_name=sequencermod

# Dependencies
fabric_version=0.86.1+1.20.1

==================================================

--- Файл №2 ---
Путь: src\client\java\seq\sequencermod\client\SequencerModClient.java
--------------------
package seq.sequencermod.client;

import seq.sequencermod.block.ModBlocks;
import seq.sequencermod.client.screen.SequencerScreen;
import seq.sequencermod.screen.ModScreenHandlers;
import net.fabricmc.api.ClientModInitializer;
import net.fabricmc.fabric.api.blockrenderlayer.v1.BlockRenderLayerMap;
import net.minecraft.client.gui.screen.ingame.HandledScreens;
import net.minecraft.client.render.RenderLayer;

public class SequencerModClient implements ClientModInitializer {
    @Override
    public void onInitializeClient() {
        HandledScreens.register(ModScreenHandlers.SEQUENCER_SCREEN_HANDLER, SequencerScreen::new);

        BlockRenderLayerMap.INSTANCE.putBlock(ModBlocks.SEQUENCER_BLOCK, RenderLayer.getCutout());
    }
}

==================================================

--- Файл №3 ---
Путь: src\client\java\seq\sequencermod\client\screen\SequencerScreen.java
--------------------
package seq.sequencermod.client.screen;

import seq.sequencermod.SequencerMod;
import seq.sequencermod.screen.SequencerScreenHandler;
import net.minecraft.client.gui.DrawContext;
import net.minecraft.client.gui.screen.ingame.HandledScreen;
import net.minecraft.entity.player.PlayerInventory;
import net.minecraft.text.Text;
import net.minecraft.util.Identifier;

public class SequencerScreen extends HandledScreen<SequencerScreenHandler> {
    private static final Identifier TEXTURE =
            new Identifier(SequencerMod.MOD_ID, "textures/gui/sequencer_gui.png");

    public SequencerScreen(SequencerScreenHandler handler, PlayerInventory inventory, Text title) {
        super(handler, inventory, title);
    }

    @Override
    protected void init() {
        super.init();
        titleX = (backgroundWidth - textRenderer.getWidth(title)) / 2;
    }

    @Override
    protected void drawBackground(DrawContext context, float delta, int mouseX, int mouseY) {
        int x = (width - backgroundWidth) / 2;
        int y = (height - backgroundHeight) / 2;
        context.drawTexture(TEXTURE, x, y, 0, 0, backgroundWidth, backgroundHeight);
    }

    @Override
    public void render(DrawContext context, int mouseX, int mouseY, float delta) {
        renderBackground(context);
        super.render(context, mouseX, mouseY, delta);
        drawMouseoverTooltip(context, mouseX, mouseY);
    }
}

==================================================

--- Файл №4 ---
Путь: src\client\java\seq\sequencermod\mixin\client\ExampleClientMixin.java
--------------------
package seq.sequencermod.mixin.client;

import net.minecraft.client.MinecraftClient;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;

@Mixin(MinecraftClient.class)
public class ExampleClientMixin {
	@Inject(at = @At("HEAD"), method = "run")
	private void init(CallbackInfo info) {
		// This code is injected into the start of MinecraftClient.run()V
	}
}

==================================================

--- Файл №5 ---
Путь: src\client\resources\sequencermod.client.mixins.json
--------------------
{
	"required": true,
	"package": "seq.sequencermod.mixin.client",
	"compatibilityLevel": "JAVA_17",
	"client": [
		"ExampleClientMixin"
	],
	"injectors": {
		"defaultRequire": 1
	}
}

==================================================

--- Файл №6 ---
Путь: src\main\java\seq\sequencermod\SequencerMod.java
--------------------
package seq.sequencermod;

import seq.sequencermod.block.ModBlocks;
import seq.sequencermod.block.entity.ModBlockEntities;
import seq.sequencermod.item.ModItemGroups;
import seq.sequencermod.screen.ModScreenHandlers;
import net.fabricmc.api.ModInitializer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SequencerMod implements ModInitializer {
    public static final String MOD_ID = "sequencer";
    public static final Logger LOGGER = LoggerFactory.getLogger(MOD_ID);

    @Override
    public void onInitialize() {
        LOGGER.info("Initializing Sequencer Mod");

        // Регистрация всех компонентов мода
        ModItemGroups.registerItemGroups();
        ModBlocks.registerModBlocks();
        ModBlockEntities.registerBlockEntities();
        ModScreenHandlers.registerScreenHandlers();
    }
}

==================================================

--- Файл №7 ---
Путь: src\main\java\seq\sequencermod\block\ModBlocks.java
--------------------
package seq.sequencermod.block;

import seq.sequencermod.SequencerMod;
import seq.sequencermod.block.custom.SequencerBlock;
import net.fabricmc.fabric.api.item.v1.FabricItemSettings;
import net.fabricmc.fabric.api.object.builder.v1.block.FabricBlockSettings;
import net.minecraft.block.Block;
import net.minecraft.block.Blocks;
import net.minecraft.item.BlockItem;
import net.minecraft.item.Item;
import net.minecraft.registry.Registries;
import net.minecraft.registry.Registry;
import net.minecraft.util.Identifier;

public class ModBlocks {
    public static final Block SEQUENCER_BLOCK = registerBlock("sequencer_block",
            new SequencerBlock(FabricBlockSettings.copyOf(Blocks.IRON_BLOCK)
                    .nonOpaque() // Делает блок визуально неполным, важно для прозрачности
                    .collidable(false) // Дела...
                    // .lightBlockage(15) // <-- УДАЛЕНО: Эта строка вызывала ошибку
            ));

    private static Block registerBlock(String name, Block block) {
        registerBlockItem(name, block);
        return Registry.register(Registries.BLOCK, new Identifier(SequencerMod.MOD_ID, name), block);
    }

    private static Item registerBlockItem(String name, Block block) {
        return Registry.register(Registries.ITEM, new Identifier(SequencerMod.MOD_ID, name),
                new BlockItem(block, new FabricItemSettings()));
    }

    public static void registerModBlocks() {
        SequencerMod.LOGGER.info("Registering ModBlocks for " + SequencerMod.MOD_ID);
    }
}

==================================================

--- Файл №8 ---
Путь: src\main\java\seq\sequencermod\block\custom\SequencerBlock.java
--------------------
package seq.sequencermod.block.custom;

import seq.sequencermod.block.entity.SequencerBlockEntity;
import net.minecraft.block.*;
import net.minecraft.block.entity.BlockEntity;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.screen.NamedScreenHandlerFactory;
import net.minecraft.util.ActionResult;
import net.minecraft.util.Hand;
import net.minecraft.util.hit.BlockHitResult;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.shape.VoxelShape;
import net.minecraft.util.shape.VoxelShapes;
import net.minecraft.world.BlockView;
import net.minecraft.world.World;
import org.jetbrains.annotations.Nullable;

public class SequencerBlock extends BlockWithEntity implements BlockEntityProvider {

    public SequencerBlock(Settings settings) {
        super(settings);
    }

    // Делаем блок "проходимым" для сущностей, убирая его коллизию.
    @Override
    public VoxelShape getCollisionShape(BlockState state, BlockView world, BlockPos pos, ShapeContext context) {
        return VoxelShapes.empty();
    }

    // <-- ИСПРАВЛЕНО: Метод переименован в getOpacity
    // Этот метод теперь отвечает за блокировку света.
    // Мы заставляем его блокировать свет полностью (значение 15), как сплошной блок.
    @Override
    public int getOpacity(BlockState state, BlockView world, BlockPos pos) {
        return 15;
    }

    // Указываем, что наш блок не является полностью непрозрачным кубом.
    @Override
    public BlockRenderType getRenderType(BlockState state) {
        return BlockRenderType.MODEL;
    }

    // Привязываем BlockEntity к нашему блоку
    @Nullable
    @Override
    public BlockEntity createBlockEntity(BlockPos pos, BlockState state) {
        return new SequencerBlockEntity(pos, state);
    }

    // Метод, вызываемый при клике ПКМ по блоку
    @Override
    public ActionResult onUse(BlockState state, World world, BlockPos pos, PlayerEntity player, Hand hand, BlockHitResult hit) {
        if (!world.isClient) {
            NamedScreenHandlerFactory screenHandlerFactory = state.createScreenHandlerFactory(world, pos);
            if (screenHandlerFactory != null) {
                player.openHandledScreen(screenHandlerFactory);
            }
        }
        return ActionResult.SUCCESS;
    }
}

==================================================

--- Файл №9 ---
Путь: src\main\java\seq\sequencermod\block\entity\ModBlockEntities.java
--------------------
package seq.sequencermod.block.entity;

import seq.sequencermod.SequencerMod;
import seq.sequencermod.block.ModBlocks;
import net.fabricmc.fabric.api.object.builder.v1.block.entity.FabricBlockEntityTypeBuilder;
import net.minecraft.block.entity.BlockEntityType;
import net.minecraft.registry.Registries;
import net.minecraft.registry.Registry;
import net.minecraft.util.Identifier;

public class ModBlockEntities {
    public static final BlockEntityType<SequencerBlockEntity> SEQUENCER_BLOCK_ENTITY =
            Registry.register(Registries.BLOCK_ENTITY_TYPE,
                    new Identifier(SequencerMod.MOD_ID, "sequencer_be"),
                    FabricBlockEntityTypeBuilder.create(SequencerBlockEntity::new,
                            ModBlocks.SEQUENCER_BLOCK).build());


    public static void registerBlockEntities() {
        SequencerMod.LOGGER.info("Registering Block Entities for " + SequencerMod.MOD_ID);
    }
}

==================================================

--- Файл №10 ---
Путь: src\main\java\seq\sequencermod\block\entity\SequencerBlockEntity.java
--------------------
package seq.sequencermod.block.entity;

import seq.sequencermod.screen.SequencerScreenHandler;
import net.minecraft.block.BlockState;
import net.minecraft.block.entity.BlockEntity;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.entity.player.PlayerInventory;
import net.minecraft.inventory.SimpleInventory; // <-- Добавлен импорт
import net.minecraft.screen.NamedScreenHandlerFactory;
import net.minecraft.screen.ScreenHandler;
import net.minecraft.text.Text;
import net.minecraft.util.math.BlockPos;
import org.jetbrains.annotations.Nullable;

public class SequencerBlockEntity extends BlockEntity implements NamedScreenHandlerFactory {
    public SequencerBlockEntity(BlockPos pos, BlockState state) {
        super(ModBlockEntities.SEQUENCER_BLOCK_ENTITY, pos, state);
    }

    // Название нашего GUI
    @Override
    public Text getDisplayName() {
        return Text.translatable("block.sequencer.sequencer_block");
    }

    // Создает экземпляр ScreenHandler'а (логики GUI) на сервере
    @Nullable
    @Override
    public ScreenHandler createMenu(int syncId, PlayerInventory playerInventory, PlayerEntity player) {
        // <-- ИСПРАВЛЕНО: Теперь мы вызываем конструктор, который принимает инвентарь.
        // Так как у нас пока нет реального инвентаря, мы создаем пустой SimpleInventory.
        return new SequencerScreenHandler(syncId, playerInventory, new SimpleInventory(0));
    }
}

==================================================

--- Файл №11 ---
Путь: src\main\java\seq\sequencermod\item\ModItemGroups.java
--------------------
package seq.sequencermod.item;

import seq.sequencermod.SequencerMod;
import seq.sequencermod.block.ModBlocks;
import net.fabricmc.fabric.api.itemgroup.v1.FabricItemGroup;
import net.minecraft.item.ItemGroup;
import net.minecraft.item.ItemStack;
import net.minecraft.registry.Registries;
import net.minecraft.registry.Registry;
import net.minecraft.text.Text;
import net.minecraft.util.Identifier;

public class ModItemGroups {
    public static final ItemGroup SEQUENCER_GROUP = Registry.register(Registries.ITEM_GROUP,
            new Identifier(SequencerMod.MOD_ID, "sequencer_group"),
            FabricItemGroup.builder().displayName(Text.translatable("itemgroup.sequencer_group"))
                    .icon(() -> new ItemStack(ModBlocks.SEQUENCER_BLOCK)).entries((displayContext, entries) -> {
                        entries.add(ModBlocks.SEQUENCER_BLOCK);
                    }).build());

    public static void registerItemGroups() {
        SequencerMod.LOGGER.info("Registering Item Groups for " + SequencerMod.MOD_ID);
    }
}

==================================================

--- Файл №12 ---
Путь: src\main\java\seq\sequencermod\mixin\ExampleMixin.java
--------------------
package seq.sequencermod.mixin;

import net.minecraft.server.MinecraftServer;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;

@Mixin(MinecraftServer.class)
public class ExampleMixin {
	@Inject(at = @At("HEAD"), method = "loadWorld")
	private void init(CallbackInfo info) {
		// This code is injected into the start of MinecraftServer.loadWorld()V
	}
}

==================================================

--- Файл №13 ---
Путь: src\main\java\seq\sequencermod\screen\ModScreenHandlers.java
--------------------
package seq.sequencermod.screen;

import seq.sequencermod.SequencerMod;
import net.fabricmc.fabric.api.screenhandler.v1.ExtendedScreenHandlerType;
import net.minecraft.registry.Registries;
import net.minecraft.registry.Registry;
import net.minecraft.screen.ScreenHandlerType;
import net.minecraft.util.Identifier;

public class ModScreenHandlers {
    public static final ScreenHandlerType<SequencerScreenHandler> SEQUENCER_SCREEN_HANDLER =
            Registry.register(Registries.SCREEN_HANDLER, new Identifier(SequencerMod.MOD_ID, "sequencer_sh"),
                    // Теперь эта строка не будет вызывать ошибку, так как мы добавили нужный конструктор
                    new ExtendedScreenHandlerType<>(SequencerScreenHandler::new));

    public static void registerScreenHandlers() {
        SequencerMod.LOGGER.info("Registering Screen Handlers for " + SequencerMod.MOD_ID);
    }
}

==================================================

--- Файл №14 ---
Путь: src\main\java\seq\sequencermod\screen\SequencerScreenHandler.java
--------------------
package seq.sequencermod.screen;

import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.entity.player.PlayerInventory;
import net.minecraft.inventory.Inventory;
import net.minecraft.inventory.SimpleInventory;
import net.minecraft.item.ItemStack;
import net.minecraft.network.PacketByteBuf; // <-- Добавлен импорт
import net.minecraft.screen.ScreenHandler;

public class SequencerScreenHandler extends ScreenHandler {
    // Временный инвентарь, пока у нас нет реальных слотов
    private final Inventory inventory;

    // Этот конструктор будет использоваться ExtendedScreenHandlerType
    // Он принимает PacketByteBuf, который мы пока игнорируем.
    public SequencerScreenHandler(int syncId, PlayerInventory playerInventory, PacketByteBuf extraData) {
        this(syncId, playerInventory, new SimpleInventory(0)); // 0 слотов
    }

    // Основной конструктор, который выполняет всю работу
    public SequencerScreenHandler(int syncId, PlayerInventory playerInventory, Inventory inventory) {
        super(ModScreenHandlers.SEQUENCER_SCREEN_HANDLER, syncId);
        checkSize(inventory, 0);
        this.inventory = inventory;
        inventory.onOpen(playerInventory.player);
    }

    @Override
    public ItemStack quickMove(PlayerEntity player, int slot) {
        return ItemStack.EMPTY;
    }

    @Override
    public boolean canUse(PlayerEntity player) {
        return this.inventory.canPlayerUse(player);
    }
}

==================================================

--- Файл №15 ---
Путь: src\main\resources\fabric.mod.json
--------------------
{
	"schemaVersion": 1,
	"id": "sequencer",
	"version": "${version}",
	"name": "Sequencer Mod",
	"description": "A mod with a sequencer block.",
	"authors": [
		"supriadozimah"
	],
	"contact": {
		"homepage": "",
		"sources": ""
	},
	"license": "MIT",
	"icon": "assets/sequencer/icon.png",
	"environment": "*",
	"entrypoints": {
		"main": [
			"seq.sequencermod.SequencerMod"
		],
		"client": [
			"seq.sequencermod.client.SequencerModClient"
		]
	},
	"depends": {
		"fabricloader": ">=0.14.22",
		"minecraft": "~1.20.1",
		"java": ">=17",
		"fabric-api": "*"
	},
	"suggests": {
		"another-mod": "*"
	}
}

==================================================

--- Файл №16 ---
Путь: src\main\resources\sequencermod.mixins.json
--------------------
{
	"required": true,
	"package": "seq.sequencermod.mixin",
	"compatibilityLevel": "JAVA_17",
	"mixins": [
		"ExampleMixin"
	],
	"injectors": {
		"defaultRequire": 1
	},
	"overwrites": {
		"requireAnnotations": true
	}
}

==================================================

--- Файл №17 ---
Путь: src\main\resources\assets\sequencer\icon.png
--------------------
[Это бинарный файл. Отображение содержимого невозможно.]
[Расширение: .png]
[Размер: 2894 байт]

==================================================

--- Файл №18 ---
Путь: src\main\resources\assets\sequencer\blockstates\sequencer_block.json
--------------------
{
  "variants": {
    "": {
      "model": "sequencer:block/sequencer"
    }
  }
}

==================================================

--- Файл №19 ---
Путь: src\main\resources\assets\sequencer\lang\en_us.json
--------------------
{
  "block.sequencer.sequencer_block": "Sequencer",
  "itemgroup.sequencer_group": "Sequencer Mod"
}

==================================================

--- Файл №20 ---
Путь: src\main\resources\assets\sequencer\loot_tables\blocks\sequencer_block.json
--------------------
{
  "type": "minecraft:block",
  "pools": [
    {
      "rolls": 1,
      "entries": [
        {
          "type": "minecraft:item",
          "name": "sequencer:sequencer_block"
        }
      ],
      "conditions": [
        {
          "condition": "minecraft:survives_explosion"
        }
      ]
    }
  ]
}

==================================================

--- Файл №21 ---
Путь: src\main\resources\assets\sequencer\models\block\sequencer.json
--------------------
{
  "textures": {
    "particle": "minecraft:block/iron_block"
  },
  "elements": []
}

==================================================

--- Файл №22 ---
Путь: src\main\resources\assets\sequencer\models\item\sequencer_block.json
--------------------
{
  "parent": "sequencer:block/sequencer"
}

==================================================

